# I/O
out_dir: out
eval_interval: 20
log_interval: 10
eval_iters: 20
always_save_checkpoint: False  # if True, always save a checkpoint after each eval
init_from: gpt2  # scratch or resume or gpt2*
# data
dataset: shakespeare
gradient_accumulation_steps: 10  # used to simulate larger batch sizes
batch_size: 12  # if gradient_accumulation_steps > 1, this is the micro-batch size
block_size: 1024
#model
n_layer: 2
n_head: 2
n_embd: 32
dropout: 0.2  # for pretraining 0 is good, for finetuning try 0.1+
bias: False  # do we use bias inside LayerNorm and Linear layers?
# optimizer
learning_rate: 1.0e-4  # max learning rate
max_iters: 1000  # total number of training iterations
weight_decay: 1.0e-1
beta1: 0.9
beta2: 0.95
grad_clip: 1.0  # clip gradients at this value, or disable if == 0.0
# learning rate decay settings
decay_lr: True  # whether to decay the learning rate
warmup_iters: 50  # how many steps to warm up for
lr_decay_iters: 1000  # should be ~= max_iters per Chinchilla
min_lr: 1.0e-5  # minimum learning rate, should be ~= learning_rate/10 per Chinchilla
# system settings
device: cuda  # examples: cpu, cuda, cuda:0, cuda:1 etc., or try mps on macbooks
dtype: bfloat16  # float32, bfloat16, or float16, the latter will auto implement a GradScaler
compile: True  # use PyTorch 2.0 to compile the model to be faster
# verbose
verbose: False
